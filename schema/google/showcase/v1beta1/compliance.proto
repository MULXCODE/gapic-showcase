// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";

package google.showcase.v1beta1;

option go_package = "github.com/googleapis/gapic-showcase/server/genproto";
option java_package = "com.google.showcase.v1beta1";
option java_multiple_files = true;

// This service is used to test that GAPICs handle various data types and HTTP annotations
// correctly, which is particularly important for server interactions using REST rather than
// HTTP. This service will also test that legacy, non-AIP-compliant patterns are consistently
// supported by all GAPIC generators.
service Compliance {
  // This service is meant to only run locally on the port 7469 (keypad digits
  // for "show").
  option (google.api.default_host) = "localhost:7469";

  // This method echoes the datapack request. This method exercises all parameters in the body
  rpc RepeatDataBody(RepeatRequest) returns (RepeatResponse) {
    option (google.api.http) = {
      post: "/v1beta1/repeat:body"
      body: "*"
    };
  }
  // This method echoes the datapack request. This method exercises all parameters in query params
  rpc RepeatDataQuery(RepeatRequest) returns (RepeatResponse) {
    option (google.api.http) = {
      get: "/v1beta1/repeat:query"
    };
  }
}

message RepeatRequest {
  string name = 1;
  ComplianceData info = 2;
}

message RepeatResponse {
  ComplianceData info = 1;
}


// ComplianceData is a message used for testing REST transcoding of
// different data types.
message ComplianceData {

  // scalar types

  string f_string = 2;

  int32 f_int32 = 3;
  sint32 f_sint32 = 4;
  sfixed32 f_sfixed32 = 5;

  uint32 f_uint32 = 6;
  fixed32 f_fixed32 = 7;

  int64 f_int64 = 8;
  sint64 f_sint64 = 9;
  sfixed64 f_sfixed64 = 10;

  uint64 f_uint64 = 11;
  fixed64 f_fixed64 = 12;

  double f_double = 13;
  float f_float = 14;

  bool f_bool = 15;

  bytes f_bytes = 16;

  // optional fields

  optional string p_string = 17;
  optional int32 p_int32 = 18;
  optional double p_double = 19;
  optional bool p_bool = 20;
}


message ComplianceSuite {
  string name = 1;
  repeated string rpcs = 2;
  repeated RepeatRequest cases = 3;
}



// DataPack is a message used for testing REST transcoding of
// different data types. In the future, it may be part of an Echo
// service RPC that also tests JSON responses.
message DataPack {
  DataPack subpack = 1;  // recursive message cause problems (infinite loop?) for go_cli

  // scalar types

  string f_string = 2;

  int32 f_int32 = 3;
  sint32 f_sint32 = 4;
  sfixed32 f_sfixed32 = 5;

  uint32 f_uint32 = 6;
  fixed32 f_fixed32 = 7;

  int64 f_int64 = 8;
  sint64 f_sint64 = 9;
  sfixed64 f_sfixed64 = 10;

  uint64 f_uint64 = 11;
  fixed64 f_fixed64 = 12;

  double f_double = 13;
  float f_float = 14;

  bool f_bool = 15;

  bytes f_bytes = 16;

  // optional fields

  optional string p_string = 17;
  optional int32 p_int32 = 18;
  optional double p_double = 19;
  optional bool p_bool = 20;
}
